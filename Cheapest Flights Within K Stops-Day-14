class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
        int[][] matrix=new int[n][n];
        for(int[] f: flights){
            matrix[f[0]][f[1]]=f[2];
            // System.out.println(f[2]);
        }
        PriorityQueue<int[]> heap=new PriorityQueue<>((a,b) -> a[0]-b[0]);
        heap.add(new int[]{0, src,K+1});
        
        
        while(!heap.isEmpty()){
           
            int[] current=heap.poll();
            int weight=current[0],vertex=current[1],remaining_stop=current[2];
            // System.out.println("weight"+weight+"vertex"+vertex+"rem"+remaining_stop);
            
            if(vertex==dst)  return weight;
            
            if(remaining_stop>0){
                for(int i=0;i<n;i++){ 
                    if(matrix[vertex][i]>0)
                        heap.add(new int[]{weight+matrix[vertex][i], i,remaining_stop-1});
                }
            }
        }
        
        // Iterator itr = heap.iterator(); 
        // while (itr.hasNext()) 
        //     System.out.println("elee"+itr.next()); 
        // System.out.println(heap);
        return -1;
    }
}
